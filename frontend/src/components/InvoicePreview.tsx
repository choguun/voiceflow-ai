import React, { useEffect, useState } from 'react';

interface InvoicePreviewProps {
  invoiceHTML: string;
  onBackToRecording: () => void;
  onStartOver: () => void;
}

export const InvoicePreview: React.FC<InvoicePreviewProps> = ({
  invoiceHTML,
  onBackToRecording,
  onStartOver
}) => {
  const [showCelebration, setShowCelebration] = useState(false);

  useEffect(() => {
    // Trigger celebration when component mounts
    setShowCelebration(true);
    const timer = setTimeout(() => setShowCelebration(false), 3000);
    return () => clearTimeout(timer);
  }, []);

  const createConfetti = () => {
    const confettiElements = [];
    for (let i = 0; i < 50; i++) {
      confettiElements.push(
        <div
          key={i}
          className="confetti-particle"
          style={{
            left: `${Math.random() * 100}%`,
            animationDelay: `${Math.random() * 2}s`,
            animationDuration: `${2 + Math.random() * 2}s`
          }}
        />
      );
    }
    return confettiElements;
  };

  const createFloatingIcons = () => {
    const icons = ['🎉', '✨', '🚀', '💫', '⭐', '🌟'];
    const floatingElements = [];
    for (let i = 0; i < 8; i++) {
      floatingElements.push(
        <div
          key={i}
          className="floating-icons"
          style={{
            left: `${10 + Math.random() * 80}%`,
            animationDelay: `${Math.random() * 1}s`
          }}
        >
          {icons[Math.floor(Math.random() * icons.length)]}
        </div>
      );
    }
    return floatingElements;
  };
  const downloadInvoice = () => {
    const blob = new Blob([invoiceHTML], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `invoice-${Date.now()}.html`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const printInvoice = () => {
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(invoiceHTML);
      printWindow.document.close();
      printWindow.focus();
      printWindow.print();
    }
  };

  const shareInvoice = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'Invoice Generated',
          text: 'Invoice generated by VoiceFlow AI',
          url: window.location.href
        });
      } catch (error) {
        console.log('Share failed:', error);
      }
    } else {
      navigator.clipboard.writeText(window.location.href);
      alert('Link copied to clipboard!');
    }
  };

  return (
    <div className={`invoice-preview ${showCelebration ? 'invoice-success' : ''}`}>
      {showCelebration && (
        <>
          <div className="success-celebration">
            {createConfetti()}
            {createFloatingIcons()}
          </div>
          <div className="success-message">
            🎉 Invoice Generated Successfully! 🎉
          </div>
        </>
      )}
      
      <div className="invoice-header">
        <h2>✅ Invoice Generated Successfully!</h2>
        <p>Your professional invoice is ready in seconds</p>
      </div>

      <div className="invoice-actions">
        <button className="action-button primary" onClick={downloadInvoice} onAnimationEnd={(e) => e.currentTarget.classList.remove('pulse-success')}>
          💾 Download HTML
        </button>
        <button className="action-button secondary" onClick={(e) => { printInvoice(); e.currentTarget.classList.add('pulse-success'); }} onAnimationEnd={(e) => e.currentTarget.classList.remove('pulse-success')}>
          🖨️ Print
        </button>
        <button className="action-button secondary" onClick={(e) => { shareInvoice(); e.currentTarget.classList.add('pulse-success'); }} onAnimationEnd={(e) => e.currentTarget.classList.remove('pulse-success')}>
          📤 Share
        </button>
      </div>

      <div className="invoice-container">
        <div 
          className="invoice-content"
          dangerouslySetInnerHTML={{ __html: invoiceHTML }}
        />
        {!invoiceHTML && (
          <div className="invoice-skeleton" aria-hidden="true">
            <div className="sk-header"></div>
            <div className="sk-row"></div>
            <div className="sk-row"></div>
            <div className="sk-row"></div>
          </div>
        )}
      </div>

      <div className="demo-actions">
        <button className="nav-button secondary" onClick={onBackToRecording}>
          🎤 Record Another
        </button>
        <button className="nav-button primary" onClick={onStartOver}>
          🔄 Start Over
        </button>
      </div>

      <div className="demo-stats">
        <div className="stat-item">
          <span className="stat-label">Processing Time</span>
          <span className="stat-value">&lt; 3 seconds</span>
        </div>
        <div className="stat-item">
          <span className="stat-label">Accuracy</span>
          <span className="stat-value">92%</span>
        </div>
        <div className="stat-item">
          <span className="stat-label">QR Code</span>
          <span className="stat-value">Generated</span>
        </div>
      </div>
    </div>
  );
};